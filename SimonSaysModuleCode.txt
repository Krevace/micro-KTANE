char serialNumChars[34] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
String serialNum;
int sequenceLength;
int sequence[5];
int solutionSequence[5];
int strikes = 0;
int vowel0[4] = {3, 2, 1, 0};
int vowel1[4] = {2, 3, 0, 1};
int vowel2[4] = {3, 0, 1, 2};
int noVowel0[4] = {1, 3, 2, 0};
int noVowel1[4] = {0, 2, 1, 3};
int noVowel2[4] = {2, 3, 0, 1};

int ledPins[4] = {15, 4, 6, 18};
int buttonPins[4] = {19, 21, 22, 23};
int greenLedPin = 14;
int redLedPin = 12;

void setup() {
  Serial.begin(115200);
  randomSeed(analogRead(0));

  for (int i = 0; i < 5; i++) {
    serialNum += serialNumChars[random(0, 34)];
  }
  serialNum += serialNumChars[random(24, 34)];
  Serial.println(" Serial: " + serialNum);
  
  sequenceLength = random(3, 6); 
  for (int i = 0; i < sequenceLength; i++) {
    sequence[i] = random(0, 4); 
  }

  findSolutionSequence();

  Serial.print("Strikes: ");
}

void loop() {

}

void findSolutionSequence() {
  if (serialNum.indexOf('A') > -1 || serialNum.indexOf('E') > -1 || serialNum.indexOf('I') > -1 || serialNum.indexOf('O') > -1 || serialNum.indexOf('U') > -1) {
    if (strikes == 0) convertEntry(vowel0);
      else if (strikes == 1) convertEntry(vowel1);
      else convertEntry(vowel2);
  } else {
    if (strikes == 0) convertEntry(noVowel0);
      else if (strikes == 1) convertEntry(noVowel1);
      else convertEntry(noVowel2);
  }
}

void convertEntry(int dictionary[]) {
  for (int i = 0; i < sequenceLength; i++) {
    solutionSequence[i] = dictionary[sequence[i]];
  }
}