#include <LiquidCrystal_I2C.h>

char serialNumChars[34] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
String indicatorLabels[11] = {"SND", "CLR", "CAR", "IND", "FRQ", "SIG", "NSA", "MSA", "TRN", "BOB", "FRK"};
String portTypes[6] = {"DVI-D", "PS/2", "RJ-45", "Stereo RCA", "Parallel", "Serial"};

bool serialOdd = false;
int batteryAmount = 0;
bool indicatorCheck = false;
bool parallelCheck = false;
int strikes = 0;
bool defused = false;
long currentMillis;
long previousRedLedMillis = 0;
bool pressed[6];
String topLabels[28] = {" ", "BLANK", "C", "CEE", "DISPLAY", "FIRST", "HOLD ON", "LEAD", "LED", "LEED", "NO", "NOTHING", "OKAY", "READ", "RED", "REED", "SAYS", "SEE", "THEIR", "THERE", "THEY ARE", "THEY'RE", "UR", "YES", "YOU", "YOU ARE", "YOU'RE", "YOUR"};
int topLabelPositions[28] = {4, 3, 1, 5, 5, 1, 5, 5, 2, 4, 5, 2, 1, 3, 3, 4, 5, 5, 3, 5, 2, 4, 0, 2, 3, 5, 3, 3};
String buttonLabels[28] = {"BLANK", "DONE", "FIRST", "HOLD", "LEFT", "LIKE", "MIDDLE", "NEXT", "NO", "NOTHING", "OKAY", "PRESS", "READY", "RIGHT", "SURE", "U", "UH HUH", "UH UH", "UHHH", "UR", "WAIT", "WHAT", "WHAT?", "YES", "YOU ARE", "YOU", "YOUR", "YOU'RE"};
int conversionList[28][14] = { {20, 13, 10, 6, 0},
                               {14, 16, 7, 22, 26, 19, 27, 3, 5, 25, 15, 24, 17, 1},
                               {4, 10, 23, 6, 8, 13, 9, 18, 20, 12, 0, 21, 11, 2},
                               {24, 15, 1, 17, 25, 19, 14, 22, 27, 7, 3},
                               {13, 4},
                               {27, 7, 15, 19, 3, 1, 17, 22, 16, 25, 5},
                               {0, 12, 10, 21, 9, 11, 8, 20, 4, 6},
                               {22, 16, 17, 26, 3, 14, 7},
                               {0, 18, 20, 2, 21, 12, 13, 23, 9, 4, 11, 10, 8},
                               {18, 13, 10, 6, 23, 0, 8, 11, 4, 21, 20, 2, 9},
                               {6, 8, 2, 23, 18, 9, 20, 10},
                               {13, 6, 23, 12, 11},
                               {23, 10, 21, 6, 4, 11, 13, 0, 12},
                               {23, 9, 12, 11, 8, 20, 21, 13},
                               {24, 1, 5, 27, 25, 3, 16, 19, 14},
                               {16, 14, 7, 22, 27, 19, 17, 1, 15},
                               {16},
                               {19, 15, 24, 27, 7, 17},
                               {12, 9, 4, 21, 10, 23, 13, 8, 11, 0, 18},
                               {1, 15, 19},
                               {18, 8, 0, 10, 23, 4, 2, 11, 21, 20},
                               {18, 21},
                               {25, 3, 27, 26, 15, 1, 17, 5, 24, 16, 19, 7, 22},
                               {10, 13, 18, 6, 2, 21, 11, 12, 9, 23},
                               {26, 7, 5, 16, 22, 1, 17, 3, 25, 15, 27, 14, 19, 24},
                               {14, 24, 26, 27, 7, 16, 19, 3, 22, 25},
                               {17, 24, 16, 26},
                               {25, 27},
                             };
String chosenButtonLabels[6];
String chosenTopLabel; 
int stage = 0;
int correctButton;

//ESP32 PINS
int ledPins[3] = {26, 25, 33};
int buttonPins[6] = {15, 4, 5, 18, 19, 23};
int greenLedPin = 14;
int redLedPin = 12; 
LiquidCrystal_I2C lcd(0x27, 20, 4);

void setup() {
  //GENERAL SETUP
  Serial.begin(115200);
  randomSeed(analogRead(0));
  for (int i = 0; i < 3; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW);
  }
  for (int i = 0; i < 6; i++) {
    pinMode(buttonPins[i], INPUT_PULLUP);
  }
  pinMode(greenLedPin, OUTPUT);
  pinMode(redLedPin, OUTPUT);
  digitalWrite(greenLedPin, LOW);
  digitalWrite(redLedPin, LOW);
  lcd.init();                
  lcd.backlight();

  //BOMB SETUP
  Serial.println("--BOMB CONFIGURATION--");
  String serialNum; 
  for (int i = 0; i < 5; i++) {
    serialNum += serialNumChars[random(0, 34)];
  }
  serialNum += serialNumChars[random(24, 34)];
  Serial.println(" Serial: " + serialNum);
  int x = serialNum.charAt(serialNum.length()-1);
  if (x % 2) serialOdd = true; 

  int batteryWidgetAmount = random(0, 6); 
  int indicatorWidgetAmount = random(0, 5-batteryWidgetAmount+1);
  int portWidgetAmount = 5-batteryWidgetAmount-indicatorWidgetAmount; 
  Serial.print("Widgets: "); 

  for (int i = 0; i < batteryWidgetAmount; i++) { 
    if (random(0, 2)) {
      Serial.print("|2 AA|");
      batteryAmount += 2; 
    } else {
      Serial.print("|1 D|");
      batteryAmount++;
    }
    Serial.print(" "); 
  }

  String chosenLabels[5]; 
  for (int i = 0; i < indicatorWidgetAmount; i++) {
    String indicator;
    bool alreadyExists;
    do {
      alreadyExists = false;
      indicator = indicatorLabels[random(0,11)];
      for (int i = 0; i < 5; i++) {
        if (indicator == chosenLabels[i]) alreadyExists = true;
      }
    } while (alreadyExists);
    chosenLabels[i] = indicator; 
    Serial.print("|");
    Serial.print(indicator); 
    if (random(0,2)) {
      Serial.print("(LIT)");
      if (indicator == "FRK" || indicator == "CAR") indicatorCheck = true; 
    } else Serial.print("(OFF)");
    Serial.print("| ");
  }

  for (int i = 0; i < portWidgetAmount; i++) {
    int lowerBound = 4;
    int upperBound = 2;
    int upperBound2 = 6;
    if (random(0, 2)) {
      lowerBound = 0;
      upperBound = 4;
      upperBound2 = 4;
    }
    Serial.print("|");
    int portAmount = random(0, upperBound+1); 
    String chosenPorts[upperBound];
    String port; 
    bool alreadyExists; 
    for (int i = 0; i < portAmount; i++) {
      do {
        alreadyExists = false;
        port = portTypes[random(lowerBound, upperBound2)];
        for (int i = 0; i < upperBound; i++) {
          if (port == chosenPorts[i]) alreadyExists = true;
        }
      } while (alreadyExists); 
      chosenPorts[i] = port; 
      if (port == "Parallel") parallelCheck = true; 
      Serial.print(port); 
      if (portAmount > 1 && i < portAmount-1) Serial.print(",");
    }
    Serial.print("| ");
  }

  //MODULE SETUP
  Serial.println();
  Serial.println();
  Serial.println("--MODULE INFORMATION--");
  generateDisplay();
  
  //FIND SOLUTION
  findCorrectButton(); 
  printDefusalSolution();
}

void loop() {
  if (strikes < 3) {
    if (defused) digitalWrite(greenLedPin, HIGH);
    currentMillis = millis();
    if (currentMillis - previousRedLedMillis >= 500) digitalWrite(redLedPin, LOW);
    for (int i = 0; i < 6; i++) {
      if (!digitalRead(buttonPins[i])) pressed[i] = true; 
      if (digitalRead(buttonPins[i]) && pressed[i]) {
        pressed[i] = false;
        if (i == correctButton) {
          digitalWrite(ledPins[stage], HIGH); 
          stage++; 
          if (stage < 3) {
            generateDisplay();
            findCorrectButton(); 
            Serial.println();
            printDefusalSolution();
          } else defused = true;
        } else {
          strikes++; 
          digitalWrite(redLedPin, HIGH); 
          previousRedLedMillis = currentMillis; 
          if (!defused) {
            generateDisplay();
            findCorrectButton(); 
          }
          Serial.println();
          printDefusalSolution();
        }
      }
    }
  } else {
    digitalWrite(redLedPin, HIGH); 
    digitalWrite(greenLedPin, LOW); 
    for (int i = 0; i < 3; i++) {
      digitalWrite(ledPins[i], LOW);
    }
    lcd.clear(); 
  }
  delay(20);
}

void generateDisplay() {
  chosenTopLabel = topLabels[random(0, 28)];
  for (int i = 0; i < 6; i++) {
    String label;
    bool alreadyExists;
    do {
      alreadyExists = false;
      label = buttonLabels[random(0, 28)];
      for (int i = 0; i < 6; i++) {
        if (chosenButtonLabels[i] == label) alreadyExists = true;
      }
    } while (alreadyExists);
    chosenButtonLabels[i] = label;
  }

  lcd.clear();
  lcd.setCursor((20-chosenTopLabel.length())/2, 0); 
  lcd.print(chosenTopLabel);
  int row = 1; 
  lcd.setCursor(0, row); 
  for (int i = 0; i < 6; i++) {
    if (!(i % 2)) lcd.print(chosenButtonLabels[i]);
      else {
        lcd.setCursor(20-chosenButtonLabels[i].length(), row);
        lcd.print(chosenButtonLabels[i]); 
        row++;
        lcd.setCursor(0, row); 
      }
  }
}

void findCorrectButton() {
  for (int i = 0; i < 28; i++) {
    if (chosenTopLabel == topLabels[i]) {
      for (int ii = 0; ii < 28; ii++) {
        if (chosenButtonLabels[topLabelPositions[i]] == buttonLabels[ii]) {
          for (int iii = 0; iii < 14; iii++) {
            for (int iiii = 0; iiii < 6; iiii++) {
              if (buttonLabels[conversionList[ii][iii]] == chosenButtonLabels[iiii]) {
                correctButton = iiii; 
                return;
              }
            }
          }
        }
      }
    }
  }
}

void printDefusalSolution() {
  Serial.println();
  Serial.println("--DEFUSAL SOLUTION--");
  Serial.print("  Press: " + chosenButtonLabels[correctButton]);
  Serial.println();
  Serial.println();
  Serial.println("--STATUS--");
  Serial.print("Strikes: ");
  for (int i = 0; i < strikes; i++) {
    Serial.print("X ");
  }
}